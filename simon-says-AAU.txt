Simon Says

AAU, I should be able to press start, and the first sequence begins
AAU, I should be able to recreate the sequence with buttons that light up and make sound
AAU, each sequence & level increase adds one more element for me to remember. 
AAU, the game should have five buttons. 
- 1 start button that also counts the levels
- 4 buttons that each make a sound+light up, each a different color.
AAU, I should be able to beat the game after X # of levels. confetti commence. 
AAU, each time i play, the sequence should be different. Randomly generated.

Level Ups:
Confetti (CHECK)
Add a light/dark mode
audio
animations
Easy / Medium / Hard??

PSEUDOCODE
// 0) Define the constants in the game play:
    // X 0.1) the player
    // X 0.2) the 4 buttons w/ their corresponding sound+color

// 1) Define the required variables tracking the game state:
    // 1.1) array to represent the 4 Buttons in the game.
        // [Red(1), Green(2), Yellow(3), Blue(4)]
    // X 1.2) a level variable to render the level increases.
    // X 1.3) an isWinner variable to represent 3 different game states:
        // the player has won
        // the player has lost at level #___
        // the game is still in play

// 2) Store cached element references on the page that will be accessed throughout the game.
    // X 2.1) sequenceArray - to add each button to the randomized game sequence. 
    // X 2.2) gameStatus - to display the 3 different game states

// 3) Upon loading, the game should:
    // 3.1) init() - initialize the start of the game
    // 3.2) Upon initialization, the function should:
        // Initialize an empty array available to .push each new sequence addition
        // initialize a 2nd empty array to .push the players created sequence
        // initialize level = 1
        // initialize isWinner = null (no level has been completed yet to track progress)
        // Allow the player to click a start button
        // render these variables with render()

// 4) render function should:
    // 4.1) Pull the index from the button array
    // 4.2) run a randomized equation
    // 4.3) output 1 of the 4 buttons, pushing into the sequenceArray
    // 4.4) use the Sequence array to cue the corresponding button's sound+color illumination.

// next, you should be able to manually click the button(s) on the page, repeating the outputted sequence (1 note added at a time)

// 5) initialize a handleClick function
    // 5.1) Upon clicking the button(s), the players choice array will be compared against the sequence array if the arrays are equal
        // if !== the game ends
        // if === the game progresses to the next level
    // 5.2) upon repeating the correct sequence(s), the level variable will increase by 1.
    // 5.3) a getWinner() function will be initialized to check if the player has beat the entire game.
    // 5.4) the render function will be reinitialized to start the next level+sequence.
          // Upon each re-render, the sequence will repeat from the beginning, adding one button+sound in each level increase.

// 6) create a getWinner function
    // 6.1) Upon each handleClick, the getWinner function will run to check if the game has been beaten.
        // this variable could be hard set at X number of levels, or be set at several difficulty intervals
            // 5 Easy
            // 10 Medium
            // 15 Hard
    // 6.2) the getWinner function will check if the players choice sequence is not only equal to the outputted render sequence, but if they have completed X amount of levels.
        // If both are true, the getWinner function will output a message congratulating the winner.
        // Else If the player's sequence is === to the outputted sequence but has not completed the necessary amount of levels, the game will rerender
        // Else if neither are true, the game will end.

// 7) If the player has lost or won, they will be allowed to click a replay button
    // 7.1) add replay button
    // 7.2) store the new replay button element
    // 7.3) Only show the replay button if the player has lost or won.

    / R / I / D / E     T / H / E     W / H / I / T / E     P / O / N / Y
      
  ,  ,.~"""""~~..                                           ___
  )\,)\`-,       `~._                                     .'   ``._
  \  \ | )           `~._                   .-"""""-._   /         \
 _/ ('  ( _(\            `~~,__________..-"'          `-<           \
 )   )   `   )/)   )        \                            \           |
') /)`      \` \,-')/\      (                             \          |
(_(\ /7      |.   /'  )'  _(`                              |         |
    \\      (  `.     ')_/`                                |         /
     \       \   \                                         |        (
      \ )  /\/   /                                         |         `~._
       `-._)     |                                        /.            `~,
                 |                          |           .'  `~.          (`
                  \                       _,\          /       \        (``
                   `/      /       __..-i"   \         |        \      (``
                  .'     _/`-..--""      `.   `.        \        ) _.~<``
                .'    _.j     /            `-.  `.       \      '=< `
              .'   _.'   \    |               `.  `.      \
             |   .'       ;   ;               .'  .'`.     \
             \_  `.       |   \             .'  .'   /    .'
               `.  `-, __ \   /           .'  .'     |   (
                 `.  `'` \|  |           /  .-`     /   .'
                   `-._.--t  ;          |_.-)      /  .'
                          ; /           \  /      / .'
                         / /             `'     .' /
                        /,_\                  .',_(
                       /___(                 /___(                 